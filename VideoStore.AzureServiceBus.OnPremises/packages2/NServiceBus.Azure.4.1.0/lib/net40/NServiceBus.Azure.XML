<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Azure</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.ConfigureAzureBlobStorageDataBus">
            <summary>
            Contains extension methods to NServiceBus.Configure for the azure blob storage data bus
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateTopicClients">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateTopicClients.Create(NServiceBus.Address)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateTopics">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateTopics.Create(NServiceBus.Address)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureMessageQueue.PeekInterval(NServiceBus.Configure,System.Int32)">
            <summary>
            Sets the amount of time, in milliseconds, to add to the time to wait before checking for a new message
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureMessageQueue.MaximumWaitTimeWhenIdle(NServiceBus.Configure,System.Int32)">
            <summary>
            Sets the maximum amount of time, in milliseconds, that the queue will wait before checking for a new message
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureMessageQueue.MessageInvisibleTime(NServiceBus.Configure,System.Int32)">
            <summary>
            Controls how long messages should be invisible to other callers when receiving messages from the queue
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureMessageQueue.BatchSize(NServiceBus.Configure,System.Int32)">
            <summary>
            Controls how many messages should be read from the queue at once
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureMessageQueue.QueuePerInstance(NServiceBus.Configure)">
            <summary>
            Configures a queue per instance
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.ConfigureAzureSagaPersister">
            <summary>
            Contains extension methods to NServiceBus.Configure for the NHibernate saga persister on top of Azure table storage.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSagaPersister.AzureSagaPersister(NServiceBus.Configure)">
            <summary>
            Use the NHibernate backed saga persister implementation.
            Be aware that this implementation deletes sagas that complete so as not to have the database fill up.
            SagaData classes are automatically mapped using Fluent NHibernate Conventions.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSagaPersister.AzureSagaPersister(NServiceBus.Configure,System.String,System.Boolean)">
            <summary>
            Use the NHibernate backed saga persister implementation on top of Azure table storage.
            SagaData classes are automatically mapped using Fluent NHibernate conventions
            and there persistence schema is automatically generated if requested.
            </summary>
            <param name="config"></param>
            <param name="connectionString"></param>
            <param name="autoUpdateSchema"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.ConfigureAzureSubscriptionStorage">
            <summary>
            Configuration extensions for the subscription storage
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.AzureSubcriptionStorage(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Azure Subscription Storage , Settings etc are read from custom config section
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.AzureSubscriptionStorage(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Azure Subscription Storage , Settings etc are read from custom config section
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.AzureSubcriptionStorage(NServiceBus.Configure,System.String,System.Boolean,System.String)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            Azure tables are created if requested by the user
            </summary>
            <param name="config"></param>
            <param name="connectionString"></param>
            <param name="createSchema"></param>
            <param name="tableName"> </param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.ConfigureAzureSubscriptionStorage.AzureSubscriptionStorage(NServiceBus.Configure,System.String,System.Boolean,System.String)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            Azure tables are created if requested by the user
            </summary>
            <param name="config"></param>
            <param name="connectionString"></param>
            <param name="createSchema"></param>
            <param name="tableName"> </param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Config.AzureSagaPersisterConfig">
            <summary>
            Config section for the Azure Saga Persister
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureSagaPersisterConfig.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureSagaPersisterConfig.CreateSchema">
            <summary>
            Â´Determines if the database should be auto updated
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.StorageQueues.AzureMessageQueueUtils">
            <summary>
            Helper class 
            </summary>
        </member>
        <member name="T:NServiceBus.Integration.Azure.AzureDiagnosticsLogger">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Integration.Azure.AzureDiagnosticsLogger.IsDebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Integration.Azure.AzureDiagnosticsLogger.IsInfoEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Integration.Azure.AzureDiagnosticsLoggerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Config.AzureTimeoutPersisterConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureTimeoutPersisterConfig.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureTimeoutPersisterConfig.TimeoutManagerDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureTimeoutPersisterConfig.TimeoutDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureTimeoutPersisterConfig.CatchUpInterval">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AzureTimeoutPersisterConfig.PartitionKeyScope">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.Azure.AzureSagaPersister">
            <summary>
            Saga persister implementation using NHibernate.
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.Boolean)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <param name="autoUpdateSchema"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Save(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Saves the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be saved.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Update(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Updates the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be updated.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Get``1(System.Guid)">
            <summary>
            Gets a saga entity from the injected session factory's current session
            using the given saga id.
            </summary>
            <param name="sagaId">The saga id to use in the lookup.</param>
            <returns>The saga entity if found, otherwise null.</returns>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.AzureSagaPersister.Complete(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Deletes the given saga from the injected session factory's
            current session.
            </summary>
            <param name="saga">The saga entity that will be deleted.</param>
        </member>
        <member name="T:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Guid)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.Azure.DictionaryTableEntity.Add(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NServiceBus.ConfigureTimeoutManager.UseAzureTimeoutPersister(NServiceBus.Configure)">
            <summary>
            Use the in azure timeout persister implementation.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.Destination">
            <summary>
            The address of the client who requested the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.SagaId">
            <summary>
            The saga ID.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.StateAddress">
            <summary>
            Additional state.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.Time">
            <summary>
            The time at which the saga ID expired.
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.CorrelationId">
            <summary>
            The correlation id
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.OwningTimeoutManager">
            <summary>
            The timeout manager that owns this particular timeout
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutDataEntity.Headers">
            <summary>
            The serialized headers
            </summary>
        </member>
        <member name="P:NServiceBus.Azure.TimeoutManagerDataEntity.LastSuccessfullRead">
            <summary>
            The last successfull chunk read.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueCreator">
            <summary>
            Creates the queues. Note that this class will only be invoked when running the windows host and not when running in the fabric
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.StorageQueues.AzureMessageQueueCreator">
            <summary>
            Creates the queues. Note that this class will only be invoked when running the windows host and not when running in the fabric
            </summary>
        </member>
        <member name="T:NServiceBus.Features.QueueAutoCreation">
            <summary>
            Makes sure that all queues are created
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.PollingDequeueStrategy">
            <summary>
            A polling implementation of <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.PollingDequeueStrategy.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
            <summary>
            Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
            <param name="address">The address to listen on.</param>
            <param name="transactionSettings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings"/> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.</param>
            <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
            <param name="endProcessMessage">Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages"/> after the message has been processed regardless if the outcome was successful or not.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.PollingDequeueStrategy.Start(System.Int32)">
            <summary>
            Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel"/>.
            </summary>
            <param name="maximumConcurrencyLevel">Indicates the maximum concurrency level this <see cref="T:NServiceBus.Transports.IDequeueMessages"/> is able to support.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.PollingDequeueStrategy.Stop">
            <summary>
            Stops the dequeuing of messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.PollingDequeueStrategy.MessageReceiver">
            <summary>
            See <see cref="T:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver.PeekInterval">
            <summary>
            Sets the amount of time, in milliseconds, to add to the time to wait before checking for a new message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver.MaximumWaitTimeWhenIdle">
            <summary>
            Sets the maximum amount of time, in milliseconds, that the queue will wait before checking for a new message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver.PurgeOnStartup">
            <summary>
            Sets whether or not the transport should purge the input
            queue when it is started.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver.MessageInvisibleTime">
            <summary>
            Controls how long messages should be invisible to other callers when receiving messages from the queue
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver.BatchSize">
            <summary>
            Controls the number of messages that will be read in bulk from the queue
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueReceiver.MessageSerializer">
            <summary>
            Gets or sets the message serializer
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueSender">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.AzureMessageQueueSender.MessageSerializer">
            <summary>
            Gets or sets the message serializer
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultIssuerName">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultLockDuration">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultMaxSizeInMegabytes">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultRequiresDuplicateDetection">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultRequiresSession">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultDefaultMessageTimeToLive">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultEnableDeadLetteringOnMessageExpiration">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.EnableDeadLetteringOnFilterEvaluationExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultDuplicateDetectionHistoryTimeWindow">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultMaxDeliveryCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultEnableBatchedOperations">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultQueuePerInstance">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultBackoffTimeInSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultServerWaitTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultConnectivityMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusDefaults.DefaultBatchSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusDequeueStrategy">
            <summary>
            Azure service bus implementation if <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusDequeueStrategy.CreateNotifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusDequeueStrategy.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
            <summary>
            Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
            <param name="address">The address to listen on.</param>
            <param name="transactionSettings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings"/> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.</param>
            <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
            <param name="endProcessMessage">Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages"/> after the message has been processed regardless if the outcome was successful or not.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusDequeueStrategy.Start(System.Int32)">
            <summary>
            Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel"/>.
            </summary>
            <param name="maximumConcurrencyLevel">Indicates the maximum concurrency level this <see cref="T:NServiceBus.Transports.IDequeueMessages"/> is able to support.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusDequeueStrategy.Stop">
            <summary>
                Stops the dequeuing of messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusDequeueStrategy.TrackNotifier(NServiceBus.Address,NServiceBus.Unicast.Queuing.Azure.ServiceBus.INotifyReceivedMessages)">
            <summary>
            
            </summary>
            <param name="notifier"></param>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServicebusSubscriptionClientCreator">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateSubscriptionClients">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateSubscriptionClients.Create(NServiceBus.Address,System.Type)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateSubscriptionClients.Create(System.Type,NServiceBus.Address,System.String)">
            <summary>
            
            </summary>
            <param name="eventType"></param>
            <param name="topic"></param>
            <param name="subscriptionname"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateQueueClients">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateQueueClients.Create(NServiceBus.Address)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.ICreateQueueClients.CreateQueue(NServiceBus.Address)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusMessageQueueSender">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueNotifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueNotifier.Start(NServiceBus.Address,System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="tryProcessMessage"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueNotifier.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueNotifier.QueueClientCreator">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueNotifier.ServerWaitTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueNotifier.BatchSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusQueueNotifier.BackoffTimeInSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier.Start(NServiceBus.Address,System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="tryProcessMessage"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier.ServerWaitTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier.BatchSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier.BackoffTimeInSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier.SubscriptionClientCreator">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicNotifier.EventType">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicPublisher">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicSubscriptionManager.Subscribe(System.Type,NServiceBus.Address)">
            <summary>
            
            </summary>
            <param name="eventType"></param>
            <param name="original"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicSubscriptionManager.Unsubscribe(System.Type,NServiceBus.Address)">
            <summary>
            
            </summary>
            <param name="eventType"></param>
            <param name="original"></param>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicSubscriptionManager.NamespaceClient">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Azure.ServiceBus.AzureServiceBusTopicSubscriptionManager.ClientCreator">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Azure.ServiceBus.BrokeredMessageExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.BrokeredMessageExtensions.SafeComplete(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.Azure.ServiceBus.BrokeredMessageExtensions.SafeAbandon(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.AzureSubscriptionStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.AzureSubscriptionStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount)">
            <summary>
            
            </summary>
            <param name="account"></param>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.Subscription">
            <summary>
            Enity containing subscription data
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.#ctor(Microsoft.WindowsAzure.Storage.Table.CloudTableClient)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.Init(Microsoft.WindowsAzure.Storage.Table.CloudTableClient)">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.SubscriptionTableName">
            <summary>
            
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.CreateIfNotExist">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionServiceContext.Subscriptions">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.AzureServiceBus">
            <summary>
            Transport definition for WindowsAzureServiceBus    
            </summary>
        </member>
        <member name="T:NServiceBus.AzureStorageQueue">
            <summary>
            Transport definition for AzureStorageQueue
            </summary>
        </member>
    </members>
</doc>
